// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  verified      Boolean   @default(false)
  language      String    @default("ar")
  theme         String    @default("dark")
  phone         String?
  country       String?
  timezone      String    @default("UTC")
  credits       Int       @default(0)
  subscription  SubscriptionType @default(FREE)
  subscriptionExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?
  isActive      Boolean   @default(true)

  accounts Account[]
  sessions Session[]
  orders   Order[]
  notifications Notification[]
  apiKeys  ApiKey[]
  analytics UserAnalytics[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  groupLink   String      // Source group link
  targetGroupLink String  // Target group link
  targetCount Int
  currentCount Int        @default(0)
  status      OrderStatus @default(PENDING)
  priority    Priority    @default(NORMAL)
  notes       String?
  estimatedCompletion DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  cancelledAt DateTime?
  price       Float       @default(0)
  currency    String      @default("USD")
  paymentStatus PaymentStatus @default(PENDING)
  paymentId   String?
  paymentMethod String?
  paymentProofUrl String?
  refundId    String?
  transferType String     @default("MEMBER_TRANSFER") // MEMBER_TRANSFER, BULK_INVITE, etc.
  sourceGroupInfo Json?   // Store source group metadata
  targetGroupInfo Json?   // Store target group metadata
  transferErrors Json?    // Store transfer errors and failed members
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  progress OrderProgress[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([transferType])
}

model OrderProgress {
  id        String   @id @default(cuid())
  orderId   String
  count     Int
  message   String?
  createdAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  read      Boolean  @default(false)
  actionUrl String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, read])
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  name      String
  key       String   @unique
  isActive  Boolean  @default(true)
  lastUsed  DateTime?
  createdAt DateTime @default(now())
  expiresAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([key])
}

model UserAnalytics {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  ordersCreated Int   @default(0)
  ordersCompleted Int @default(0)
  membersAdded Int   @default(0)
  creditsUsed Int    @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string")
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  MODERATOR
  SUPER_ADMIN
}

enum SubscriptionType {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  FAILED
  PAUSED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  SYSTEM
}
